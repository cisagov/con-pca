name: Deploy
on:
  push:
    branches: [develop]
  repository_dispatch:
    types: [deploy]

env:
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  ECR_URI: ${{ secrets.ECR_URI }}
  REGION: us-east-1
  ENVIRONMENT: dev
jobs:
  build_web:
    runs-on: ubuntu-latest
    env:
      IMAGE_REPO: con-pca-web
    outputs:
      tag: ${{ steps.vars.outputs.tag}}
    steps:
      - uses: actions/checkout@v2
        with:
          repository: cisagov/con-pca-web
      - name: Get Tag
        id: vars
        run: echo ::set-output name=tag::$(git rev-parse --short HEAD)
      - name: Build Docker Image
        run: docker build -t $IMAGE_REPO:${{steps.vars.outputs.tag}} .
        if: ${{ github.event.client_payload.trigger == env.IMAGE_REPO }}
      - name: Tag Docker Image
        run: docker tag $IMAGE_REPO:${{steps.vars.outputs.tag}} $ECR_URI/$IMAGE_REPO:${{steps.vars.outputs.tag}}
        if: ${{ github.event.client_payload.trigger == env.IMAGE_REPO }}
      - name: ECR Login
        run: aws ecr get-login-password --region $REGION | docker login --username AWS --password-stdin $ECR_URI/$IMAGE_REPO
        if: ${{ github.event.client_payload.trigger == env.IMAGE_REPO }}
      - name: Push Docker Image
        run: docker push $ECR_URI/$IMAGE_REPO:${{steps.vars.outputs.tag}}
        if: ${{ github.event.client_payload.trigger == env.IMAGE_REPO }}

  build_api:
    runs-on: ubuntu-latest
    env:
      IMAGE_REPO: con-pca-api
    outputs:
      tag: ${{ steps.vars.outputs.tag}}
    steps:
      - uses: actions/checkout@v2
        with:
          repository: cisagov/con-pca-api
      - name: Get Tag
        id: vars
        run: echo ::set-output name=tag::$(git rev-parse --short HEAD)
      - name: Build Docker Image
        run: docker build -t $IMAGE_REPO:${{steps.vars.outputs.tag}} .
        if: ${{ github.event.client_payload.trigger == env.IMAGE_REPO }}
      - name: Tag Docker Image
        run: docker tag $IMAGE_REPO:${{steps.vars.outputs.tag}} $ECR_URI/$IMAGE_REPO:${{steps.vars.outputs.tag}}
        if: ${{ github.event.client_payload.trigger == env.IMAGE_REPO }}
      - name: ECR Login
        run: aws ecr get-login-password --region $REGION | docker login --username AWS --password-stdin $ECR_URI/$IMAGE_REPO
        if: ${{ github.event.client_payload.trigger == env.IMAGE_REPO }}
      - name: Push Docker Image
        run: docker push $ECR_URI/$IMAGE_REPO:${{steps.vars.outputs.tag}}
        if: ${{ github.event.client_payload.trigger == env.IMAGE_REPO }}

  build_gophish:
    runs-on: ubuntu-latest
    env:
      IMAGE_REPO: con-pca-gophish
    outputs:
      tag: ${{ steps.vars.outputs.tag}}
    steps:
      - uses: actions/checkout@v2
        with:
          repository: cisagov/con-pca-gophish
      - name: Get Tag
        id: vars
        run: echo ::set-output name=tag::$(git rev-parse --short HEAD)
      - name: Build Docker Image
        run: docker build -t $IMAGE_REPO:${{steps.vars.outputs.tag}} .
        if: ${{ github.event.client_payload.trigger == env.IMAGE_REPO }}
      - name: Tag Docker Image
        run: docker tag $IMAGE_REPO:${{steps.vars.outputs.tag}} $ECR_URI/$IMAGE_REPO:${{steps.vars.outputs.tag}}
        if: ${{ github.event.client_payload.trigger == env.IMAGE_REPO }}
      - name: ECR Login
        run: aws ecr get-login-password --region $REGION | docker login --username AWS --password-stdin $ECR_URI/$IMAGE_REPO
        if: ${{ github.event.client_payload.trigger == env.IMAGE_REPO }}
      - name: Push Docker Image
        run: docker push $ECR_URI/$IMAGE_REPO:${{steps.vars.outputs.tag}}
        if: ${{ github.event.client_payload.trigger == env.IMAGE_REPO }}

  terraform:
    runs-on: ubuntu-latest
    needs: [build_web, build_api, build_gophish]

    steps:
      # Checkout api for building lambda function
      - uses: actions/checkout@v2
        with:
          repository: cisagov/con-pca-api
          path: con-pca-api

      # Checkout con-pca repo for running terraform
      - uses: actions/checkout@v2
        with:
          path: con-pca

      # Install python 3.8 for installing lambda layer
      - uses: actions/setup-python@v1
        with:
          python-version: 3.8
      - name: Upgrade Pip
        run: pip install --upgrade pip

      # Install Terraform
      - uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 0.13.3
      - name: Verify Terraform version
        run: terraform --version

      # Install Lambda Layer
      - name: Install Python Requirements
        run: |
          mkdir ./con-pca/terraform/layers
          mkdir ./con-pca/terraform/layers/layer
          mkdir ./con-pca/terraform/layers/layer/python
          pip install -r ./con-pca-api/requirements-lambda-other.txt -t ./con-pca/terraform/layers/layer/python
          mkdir ./con-pca/terraform/layers/scikit
          mkdir ./con-pca/terraform/layers/scikit/python
          pip install -r ./con-pca-api/requirements-lambda-scikit.txt -t ./con-pca/terraform/layers/scikit/python --no-deps

      # Initialize Terraform
      - name: Terraform init
        working-directory: ./con-pca/terraform
        run: terraform init -input=false

      # Select terraform workspace
      - name: Terraform Workspace
        working-directory: ./con-pca/terraform
        run: |
          terraform workspace select $ENVIRONMENT
          terraform workspace show

      # Validate Terraform
      - name: Terraform validation
        working-directory: ./con-pca/terraform
        run: terraform validate

      # Sometimes this just needs run again...
      - name: Terraform init 2
        working-directory: ./con-pca/terraform
        run: terraform init -input=false

      # Apply terraform
      - name: Terraform Apply
        working-directory: ./con-pca/terraform
        run: terraform apply -auto-approve -var-file ./vars/$ENVIRONMENT.tfvars -var="gophish_image_tag=${{needs.build_gophish.outputs.tag}}" -var="api_image_tag=${{needs.build_api.outputs.tag}}" -var="web_image_tag=${{needs.build_web.outputs.tag}}"
